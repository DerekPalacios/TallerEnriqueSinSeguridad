@page "/dCompras"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Detalle Compras</h3>

<div class="form-group">
    <a class="btn btn-info" href="dCompras/crear">Agregar Compras</a>
</div>

<ListadoGenerico Listado="DCompras">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Acción</th>
                    <th>Nombre Producto</th>
                    <th>Cantidad</th>
                    <th>Precio </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in DCompras)
                {
                    <tr>
                        <td>
                            <a href="/dCompras/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button @onclick="@(() => BorrarDCompra(item))" class="btn btn-danger">Borrar</button>
                        </td>
                        <td>@item.Articulo.Nombre</td>
                        <td>@item.Cantidad</td>
                        <td>@item.PrecioUnitario</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    [Parameter] public Articulo Articulo { get; set; }
    public List<DCompra> DCompras { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<List<DCompra>>("api/dCompras");
        DCompras = responseHttp.Response;
    }

    private async Task BorrarDCompra(DCompra dCompra)
    {
        var responseHttp = await repositorio.Delete($"api/dCompras/{dCompra.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }
}