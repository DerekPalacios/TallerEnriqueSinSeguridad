@page "/servicios"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Servicios</h3>

<div class="form-group">
    <a class="btn btn-info" href="servicios/crear">Agregar Servicio</a>
</div>

<ListadoGenerico Listado="Servicios">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Acción</th>
                    <th>Categoria</th>
                    <th>Descripcion</th>
                    <th>Precio</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Servicios)
                {
                    <tr>
                        <td>
                            <a href="/servicios/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button @onclick="@(() => BorrarServicio(item))" class="btn btn-danger">Borrar</button>
                        </td>
                        <td>@item.Categoria.Nombre</td>
                        <td>@item.Descripcion</td>
                        <td>@item.Precio</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    public List<Servicio> Servicios { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<List<Servicio>>("api/servicios");
        Servicios = responseHttp.Response;
    }

    private async Task BorrarServicio(Servicio servicio)
    {
        var responseHttp = await repositorio.Delete($"api/servicios/{servicio.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }
}