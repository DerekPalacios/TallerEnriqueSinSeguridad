@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject HttpClient http


<EditForm Model="Compra" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Num Factura:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Compra.NFactura" />
            <ValidationMessage For="@(() => Compra.NFactura)" />
        </div>
    </div>

    <div class="form-group">
        <label>Fecha:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Compra.Fecha" />
            <ValidationMessage For="@(() => Compra.Fecha)" />
        </div>
    </div>

    @*<div class="form-group">
            <label>Proveedor:</label>
            <div>
                <InputText class="form-control" @bind-Value="@Compra.Proveedor.NombreEmpresa" />
                <ValidationMessage For="@(() => Compra.Proveedor.NombreEmpresa)" />
            </div>
        </div>*@


    <!--<div class="form-group">
        <label>Proveedor:</label>-->
        @*@bind-Value="@seleccion"*@
        <!--<InputSelect class="form-select" aria-label="Default select example" @bind-Value="Proveedor">
            @foreach (var item in Proveedores)
            {
                <option value="@item.Id">@item.NombreEmpresa</option>
            }

        </InputSelect>-->
        @*&nbsp;<ValidationMessage For="@(() => Proveedores[0].NombreContacto)" />*@
    <!--</div>-->
    @*<div class="col-12 row">
            <label class="col-2 font-weight-bold">Nombre Contacto:</label>
            <InputText id="CountryName" @bind-Value="@seleccion" placeholder="Contacto" class="form-control" />
            &nbsp;<ValidationMessage For="@(() => Proveedores[0].NombreContacto)" />
        </div>*@


    @*felipegavilanYoutube*@
    <div class="form-group">
        <label>Proveedor</label>
        <div>
            <InputSelectNumber class="form-control"
                               ValueChanged="@((int value) => ProvHasChanged(value))"
                               ValueExpression="@(() => proveedorId)"
                               Value="@proveedorId">
                <option value="0">--Seleccione--</option>
                @foreach (var item in Proveedores)
                {
                    @if (item.Id == proveedorId)
                    {
                        <option selected value="@item.Id">@item.NombreEmpresa</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.NombreEmpresa</option>
                    }

                }


            </InputSelectNumber>
        </div>
    </div>
    @*felipegavilanCurso*@
    @*<div class="form-group">
        <label>Proveedores</label>
        <div>
            <SelectorMultipleTypeahead SearchMethod="ObtenerProveedores" ElementosSeleccionados="Proveedores">

            </SelectorMultipleTypeahead>
        </div>
    </div>*@


    <div class="row">

        <div class="col-6">
            <button class="btn btn-success" type="submit">Guardar Cambios</button>
            <a asp-page="mecanico" class="btn btn-success">volver</a>
        </div>
    </div>
</EditForm>

@code {
        //probando
    public int proveedorId = 0;

    [Parameter] public Proveedor Proveedor { get; set; } = new Proveedor();
    public List<Proveedor> Proveedores { get; set; } = new List<Proveedor>();
    [Parameter] public Compra Compra { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }//Para pasar eventos como parametro

    string seleccion;

    private async Task ObtenerProveedores()
    {
        var httpResponse = await repositorio.Get<List<Proveedor>>("api/compras");
        Proveedores = httpResponse.Response;
    }
    //protected override async Task OnInitializedAsync()
    //{

    //    await ObtenerProveedores();

    //}
    //probando

    protected override async Task OnInitializedAsync()
    {
        Proveedores = await http.GetFromJsonAsync<List<Proveedor>>("api/proveedores");
    }

    private void ProvHasChanged(int value)
    {

    }
    @*felipegavilanCurso*@
    //private async Task<IEnumerable<Proveedor>> BuscarProveedores(string searchText)
    //{
    //    var responseHttp = await repositorio.Get<List<Proveedor>>($"api/proveedores/buscar/{ searchText}");
    //    return responseHttp.Response;
    //}

}

